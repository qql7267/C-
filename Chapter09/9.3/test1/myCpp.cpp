#include <iostream>

int main()
{
	/*
	名称空间
	*/

	/*
	传统的C++名称空间
	声明区域 可以在其中进行声明的区域
	潜在作用域 变量的潜在作用域从声明点开始 到其声明区域的结尾 因此潜在作用域比声明区域小 这是由于变量必须定义后才能使用
	*/

	/*
	新的名称空间特性
	通过定义一种新的区域来创建声明的名称空间
	这样做的目的之一是提佛那个一个声明名称的区域 一个名称空间中的名称不会与另外一个名称空间的相同名称发生冲突 同时运行程序的其他部分使用该名称空间中声明的东西
	名称空间可以是全局的 也可以位于另一个名称空间中 但不能位于代码块中 因此在默认情况下 在空间中声明的名称的链接性为外部的(除非他引用了常量)
	除了用户定义的名称空间外 还存在一个名称空间――全局名称空间 他对应于文件级声明区域 因此全局变量被数数为位于全局名称空间中
	
	using声明和using编译指令
	有两种机制来简化对名称空间中名称的使用
	using声明是特定的标识符可用
	using编译指令使整个名称空间可用
	*/

	/*
	名称空间及其前途
	1.使用在已命名的名称空间中声明的变量而不是使用外部全局变量
	2.使用在已命名的名称空间中声明的变量而不是使用静态全局变量
	3.如果开发了一个函数库或类库 将其放在一个名称空间中
	4.仅将编译指令using作为一种将旧代码转换为使用名称空间的权益之计
	5.不要在头文件中使用using编译指令 如果一定要使用编译指令using应将其放在所有预处理器编译指令#include之后
	6.导入名称时 首选使用作用域解析运算符或using声明的方法
	7.对于using声明 首选将其作用域设置为局部而不是全局
	*/

	return 0;
}