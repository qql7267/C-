#include <iostream>
using namespace std;

int main()
{
	/*
	类型组合
	介绍一下数组、结构和指针以各种方式组合
	*/
	struct example_1
	{
		int s1_1;
	};
	//可以创建这种类型的变量
	example_1 a1, a2, a3;
	//使用成员运算符访问其成员
	a1.s1_1 = 1;

	//创建指向这种结构的指针
	example_1 * b1 = &a2;
	//讲改制镇设置为有效地址后 就可以成员运算符访问其成员
	b1->s1_1 = 2;

	//创建结构数组
	example_1 c1[3];
	//然后可以使用成员运算符访问元素的成员
	c1[0].s1_1 = 3;
	cout << c1->s1_1 << endl;
	//其中c1是一个数组 c1[0]是一个结构 而c1[0].s1_1是该结构的一个成员 由于数组名是一个指针 因此也可以使用间接成员运算符
	(c1 + 1)->s1_1 = 4;

	//创建指针数组
	const example_1 * e1[3] = { &a1, &a2, &a3 };
	//e1是一个指针数组 e1[1]就是一个指针 可将间接成员运算符应用于他 以访问成员
	cout << e1[1]->s1_1 << endl;

	//可以创建
	const example_1 ** f1 = e1;
	//e1是一个数组的名称是第一个元素的地址 但其第一个元素为指针因此f1是一个指针 指向一个指向example_1的指针 这样写容易出错 因此建议用auto
	auto f2 = e1;
	//犹豫f1是一个指向结构指针的指针 因此*f1是一个结构指针 可将间接成员运算符应用于他
	cout << (*f2)->s1_1 << endl;
	cout << (*(f2 + 1))->s1_1 << endl;

	return 0;
}